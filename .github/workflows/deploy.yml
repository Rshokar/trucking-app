name: CI for Trucking App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
        FLASK_DEBUG: 0
        RESET_PASSWORD_CODE_EXPIRY: 5
        AUTHORIZATION_HEADER: Authorization-Fake-X
        WEB_URL: http://34.216.125.64:3000
        MAX_CONTENT_SIZE: 16777216


    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Generate Random Secrets
      run: |
        echo "OPERATOR_AUTH_TOKEN_SECRET=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "SEND_OPERATOR_RFO_TOKEN_SECRET=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "OPERATOR_ACCESS_TOKEN_SECRET=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "RESET_PASSWORD_SECRET=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "RESET_PASSWORD_SALT=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "CI=false" >> $GITHUB_ENV

    - name: Build Web Client
      run: |
        cd ./trucking-app-web
        npm ci
        npm run build_prod

    - name: Build Docker images
      run: docker-compose build

    # If you have tests, uncomment and adjust this block
    #- name: Run tests
    #  run: docker-compose run YOUR_SERVICE_NAME YOUR_TEST_COMMAND

    - name: Login to Docker Hub
      run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Push Docker images
      run: docker-compose push

    - name: SCP docker-compose and config to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        source: "./docker-compose.yaml,./nginx.conf"
        target: "./"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "FLASK_DEBUG=${{ env.FLASK_DEBUG }}" >> .env
          echo "OPERATOR_AUTH_TOKEN_SECRET=${{ env.OPERATOR_AUTH_TOKEN_SECRET }}" >> .env
          echo "SEND_OPERATOR_RFO_TOKEN_SECRET=${{ env.SEND_OPERATOR_RFO_TOKEN_SECRET }}" >> .env
          echo "OPERATOR_ACCESS_TOKEN_SECRET=${{ env.OPERATOR_ACCESS_TOKEN_SECRET }}" >> .env
          echo "RESET_PASSWORD_SECRET=${{ env.RESET_PASSWORD_SECRET }}" >> .env
          echo "RESET_PASSWORD_SALT=${{ env.RESET_PASSWORD_SALT }}" >> .env
          echo "RESET_PASSWORD_CODE_EXPIRY=${{ env.RESET_PASSWORD_CODE_EXPIRY }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "SES_MAIL_SERVER=${{ secrets.SES_MAIL_SERVER }}" >> .env
          echo "SES_MAIL_PORT=${{ secrets.SES_MAIL_PORT }}" >> .env
          echo "SES_MAIL_USERNAME=${{ secrets.SES_MAIL_USERNAME }}" >> .env
          echo "SES_MAIL_PASSWORD=${{ secrets.SES_MAIL_PASSWORD }}" >> .env
          echo "MAX_CONTENT_SIZE=${{ env.MAX_CONTENT_SIZE }}" >> .env
          echo "AUTHORIZATION_HEADER=${{ env.AUTHORIZATION_HEADER }}" >> .env
          echo "WEB_URL=${{ env.WEB_URL }}" >> .env
          
          sudo yum update -y
          sudo yum install docker -y
          sudo service docker start
          sudo docker-compose down
          sudo docker-compose pull
          sudo docker image prune -f
          sudo docker-compose up -d